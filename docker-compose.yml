services:
  fastapi_server:
    container_name: fastapi_server
    build: ./backend
    restart: always
    command: "sh -c 'alembic upgrade head && python app/document_ingestion.py  && uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 9090'"
    volumes:
      - ./backend/app:/code
    expose:
      - 9090
    env_file: ".env"
    depends_on:
      - database
    labels:
      - "prometheus-job=fastapi"
    networks:
      - monitoring

  nextjs_server:
    container_name: nextjs_server
    build: ./frontend
    restart: always
    command: "sh -c 'node server.js'"
    volumes:
      - ./frontend:/code
    ports:
      - 3000:3000
    expose:
      - 3000
    env_file: "frontend/.env"
    depends_on:
      - fastapi_server
    labels:
      - "prometheus-job=nextjs"
    networks:
      - monitoring

  redis_server:
    image: redis:alpine
    container_name: redis_server
    restart: always
    ports:
      - 6379:6379 # Remove this on production
    expose:
      - 6379
    env_file: ".env"
    networks:
      - monitoring

  database:
    image: ankane/pgvector
    restart: always
    container_name: database
    env_file: ".env"
    user: root
    volumes:
      - ./db_docker:/var/lib/postgresql
      - ./scripts/1-create-dbs.sql:/docker-entrypoint-initdb.d/1-create-dbs.sql
    ports:
      - 5432:5432
    expose:
      - 5432
    environment:
      - POSTGRES_USERNAME=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DATABASE=${DATABASE_NAME}
      - POSTGRES_HOST_AUTH_METHOD= "trust"
    networks:
      - monitoring

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: always
    ports:
      - 9187:9187
    env_file: ".env"
    environment:
      DATA_SOURCE_NAME: "postgresql://${DATABASE_USER}:${DATABASE_PASSWORD}@database:5432/${DATABASE_NAME}?sslmode=disable"
    depends_on:
      - database
    networks:
      - monitoring

  caddy_reverse_proxy:
    container_name: caddy_reverse_proxy
    image: caddy:alpine
    restart: always
    ports:
      - 80:80
      - 9090:9090
      - 443:443
    environment:
      - EXT_ENDPOINT1=${EXT_ENDPOINT1}
      - LOCAL_1=${LOCAL_1}
      - LOCAL_2=${LOCAL_2}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - monitoring

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    ports:
      - 9091:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - fastapi_server
      - nextjs_server
      - postgres_exporter
    networks:
      - monitoring

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    ports:
      - 3001:3000
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus
    networks:
      - monitoring

volumes:
  caddy_data:
  caddy_config:
  langchain-db-data:
  langchain-redis-data:
  prometheus_data:
  grafana_data:

networks:
  monitoring:
    driver: bridge
